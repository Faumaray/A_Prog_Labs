use clap::Parser;
use service::OperandClient;
use std::{net::SocketAddr, io};
use tarpc::{client, context, tokio_serde::formats::Json};

#[derive(Parser)]
struct Flags {
    /// Sets the server address to connect to.
    #[clap(long)]
    server_addr: SocketAddr,
}
#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let flags = Flags::parse();

    
    let transport = tarpc::serde_transport::tcp::connect(flags.server_addr, Json::default);
    let client = OperandClient::new(client::Config::default(), transport.await?).spawn();
    // Client is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    loop
    {
        let mut choice = String::new();
        let mut number = String::new();    
        io::stdin()
        .read_line(&mut number)
        .expect("Failed to read input");
        let add = &client.add(context::current(), number).await;
        println!("{}", add.as_ref().unwrap());
        println!("Continue? (n==no)");
        io::stdin()
        .read_line(&mut choice)
        .expect("Failed to read input");
        if choice.starts_with("n")
        {
            break;
        }
    }

    Ok(())
}